// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	v1 "k8s.io/api/rbac/v1"
)

// IProjectService is an autogenerated mock type for the IProjectService type
type IProjectService struct {
	mock.Mock
}

// ReconcileProject provides a mock function with given fields: ctx, req, workerClusterRoleRules, readOnlyRoleRules, readWriteRoleRules
func (_m *IProjectService) ReconcileProject(ctx context.Context, req reconcile.Request, workerClusterRoleRules []v1.PolicyRule, readOnlyRoleRules []v1.PolicyRule, readWriteRoleRules []v1.PolicyRule) (reconcile.Result, error) {
	ret := _m.Called(ctx, req, workerClusterRoleRules, readOnlyRoleRules, readWriteRoleRules)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request, []v1.PolicyRule, []v1.PolicyRule, []v1.PolicyRule) reconcile.Result); ok {
		r0 = rf(ctx, req, workerClusterRoleRules, readOnlyRoleRules, readWriteRoleRules)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request, []v1.PolicyRule, []v1.PolicyRule, []v1.PolicyRule) error); ok {
		r1 = rf(ctx, req, workerClusterRoleRules, readOnlyRoleRules, readWriteRoleRules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
