// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	v1 "k8s.io/api/rbac/v1"
)

// IAccessControlService is an autogenerated mock type for the IAccessControlService type
type IAccessControlService struct {
	mock.Mock
}

// ReconcileReadOnlyRole provides a mock function with given fields: ctx, namespace, owner, readOnlyRoleRules
func (_m *IAccessControlService) ReconcileReadOnlyRole(ctx context.Context, namespace string, owner client.Object, readOnlyRoleRules []v1.PolicyRule) (reconcile.Result, error) {
	ret := _m.Called(ctx, namespace, owner, readOnlyRoleRules)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, client.Object, []v1.PolicyRule) reconcile.Result); ok {
		r0 = rf(ctx, namespace, owner, readOnlyRoleRules)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, client.Object, []v1.PolicyRule) error); ok {
		r1 = rf(ctx, namespace, owner, readOnlyRoleRules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconcileReadOnlyUserServiceAccountAndRoleBindings provides a mock function with given fields: ctx, namespace, names, owner
func (_m *IAccessControlService) ReconcileReadOnlyUserServiceAccountAndRoleBindings(ctx context.Context, namespace string, names []string, owner client.Object) (reconcile.Result, error) {
	ret := _m.Called(ctx, namespace, names, owner)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, client.Object) reconcile.Result); ok {
		r0 = rf(ctx, namespace, names, owner)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, client.Object) error); ok {
		r1 = rf(ctx, namespace, names, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconcileReadWriteRole provides a mock function with given fields: ctx, namespace, owner, readWriteRoleRules
func (_m *IAccessControlService) ReconcileReadWriteRole(ctx context.Context, namespace string, owner client.Object, readWriteRoleRules []v1.PolicyRule) (reconcile.Result, error) {
	ret := _m.Called(ctx, namespace, owner, readWriteRoleRules)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, client.Object, []v1.PolicyRule) reconcile.Result); ok {
		r0 = rf(ctx, namespace, owner, readWriteRoleRules)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, client.Object, []v1.PolicyRule) error); ok {
		r1 = rf(ctx, namespace, owner, readWriteRoleRules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconcileReadWriteUserServiceAccountAndRoleBindings provides a mock function with given fields: ctx, namespace, names, owner
func (_m *IAccessControlService) ReconcileReadWriteUserServiceAccountAndRoleBindings(ctx context.Context, namespace string, names []string, owner client.Object) (reconcile.Result, error) {
	ret := _m.Called(ctx, namespace, names, owner)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, client.Object) reconcile.Result); ok {
		r0 = rf(ctx, namespace, names, owner)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, client.Object) error); ok {
		r1 = rf(ctx, namespace, names, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconcileWorkerClusterRole provides a mock function with given fields: ctx, namespace, owner, workerClusterRoleRules
func (_m *IAccessControlService) ReconcileWorkerClusterRole(ctx context.Context, namespace string, owner client.Object, workerClusterRoleRules []v1.PolicyRule) (reconcile.Result, error) {
	ret := _m.Called(ctx, namespace, owner, workerClusterRoleRules)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, client.Object, []v1.PolicyRule) reconcile.Result); ok {
		r0 = rf(ctx, namespace, owner, workerClusterRoleRules)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, client.Object, []v1.PolicyRule) error); ok {
		r1 = rf(ctx, namespace, owner, workerClusterRoleRules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconcileWorkerClusterServiceAccountAndRoleBindings provides a mock function with given fields: ctx, clusterName, namespace, owner
func (_m *IAccessControlService) ReconcileWorkerClusterServiceAccountAndRoleBindings(ctx context.Context, clusterName string, namespace string, owner client.Object) (reconcile.Result, error) {
	ret := _m.Called(ctx, clusterName, namespace, owner)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, string, client.Object) reconcile.Result); ok {
		r0 = rf(ctx, clusterName, namespace, owner)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, client.Object) error); ok {
		r1 = rf(ctx, clusterName, namespace, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveWorkerClusterServiceAccountAndRoleBindings provides a mock function with given fields: ctx, clusterName, namespace, owner
func (_m *IAccessControlService) RemoveWorkerClusterServiceAccountAndRoleBindings(ctx context.Context, clusterName string, namespace string, owner client.Object) (reconcile.Result, error) {
	ret := _m.Called(ctx, clusterName, namespace, owner)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, string, client.Object) reconcile.Result); ok {
		r0 = rf(ctx, clusterName, namespace, owner)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, client.Object) error); ok {
		r1 = rf(ctx, clusterName, namespace, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
